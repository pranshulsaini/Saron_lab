% Last modified before Pranshul: 10th Feb 2015

% This code is written to do reconstruction of EEG channel data after
% removing sources based on OUT file generated by the wrapper script
%  The code generates the outputfiles in a directory prepended with 'recon_' in a subject's Eyes Open
% or Eyes Closed folder depending on which wrapper script is run. 

function reconEEGdata_forCMPdata(eegfile, reconType, dataloc, outfile) % ['CPT03811_forSOBI',1 or 2,'\\Dss02544-cmb-d\h\CPT_SOBI_Output\CPT03811_forSOBI\CPT03811_forSOBI_Sources_CPT\','CPT03811_forSOBI.out'  ]  (P)
        mkdir([dataloc,[eegfile, '_recon']]);  % directory for reconstructed files
        outloc =[dataloc,[eegfile, '_recon']]; % location of output files (P)
        cd (outloc);
        if exist(dataloc,'dir') ~= 7
           fprintf(1, '\nDirectory for the subject (%s) doesn''t exist, Run SOBI first');
           return;
        else 
           fprintf(1, '\nSubject''s directory exists, Continuing...'); 
        end  
        wfile = strrep([dataloc,outfile],'.out','_CMP_W.mat'); % Name without location: CPT03811_forSOBI_CPT_W.mat. This file was saved during the function smart_autism() in the file tSOBI_CPT_betterSMART.m (P)
        wf = load(wfile);
        W = wf.W;   % This is the matrix which if we multiply with the input data, we get source signals (P)
        St = wf.aST;  % This is the source signals. Dim: 88 x (n_trial*epoch_time) (P)
        toi = wf.toi;  % It contains starting and ending time of each epoch/trial w.r.t. trigger time stamp. Assuming 256 trials, the dim should be something like: 256 x 2 (P)
        trig = wf.trig; % It contains triggers {1,2,3,4,5}. Should be around 256
 %       BlockData = wf.BlockData;
 
        pathtooutfile = [dataloc, outfile]; %'C:\Users\plsaini\Box Sync\Stroop\Temp\STR00412_aux_NoBad_AvgRef_forSOBI\STR00412_aux_NoBad_AvgRef_forSOBI_Sources_STR\STR00412_aux_NoBad_AvgRef_forSOBI.out'
        reconDatUsingOut(W, St, toi, trig, pathtooutfile, reconType);  %This function is in this file only. It finds artifacts and writes clean reconstructed .dat, .generic, and .evt (improper time stamps) files (P)
        
%     end    
end

% Output: reconstructed EEG data.
function reconDatUsingOut(W, St, toi, trig, outfile, reconType)
    A = inv(W);
    fprintf(1,'\n File under consideration = %s\n',outfile);   % just writes it to the screeen when this line is run. '1' means that just display it
    if reconType == 1  % artifacts chosen by vote 
        artifacts = findArtifacts(outfile);  
    elseif reconType == 2  % artifacts here are actually normal neural signal sources (included) ones
        artifacts = findArtifacts(outfile);
        artifacts = setdiff(1:size(W,1), artifacts) ;  % returns all the sources which are not assigned to any artifact. Replaced size(W) by size(W,1) (P)     
    end
    
    temp_cap = A(:,setdiff(1:size(W,1),artifacts))*St(setdiff(1:size(W,1),artifacts),:); % If reconType is 1, then this is reconstructed signal out of of only neural signals (No noise) (P)
    [t1,t2,t3] = fileparts(outfile);
    if reconType == 1
        Hdr = writeBESAsb_data(temp_cap, strcat('recon_',t2,'.dat'));  % writing data to the file with filename as the second argument here. Returns 'Hdr' structure for generic file (P)
        writeBESAgeneric(strcat('recon_',t2,'.generic'), Hdr); % writes generic file
        %writeBESAevt(strcat('recon_',t2,'.evt'), toi, trig);  
    elseif reconType == 2
        Hdr = writeBESAsb_data(temp_cap, strcat('reconInverse_',t2,'.dat')); % this is pure noise (P)
        writeBESAgeneric(strcat('reconInverse_',t2,'.generic'), Hdr);
        %writeBESAevt(strcat('reconInverse_',t2,'.evt'), toi, trig);        
    end

end


function artifacts = findArtifacts(outfile)   % will return the channels assigned as arifacts, either emg, peaks, eog, or Reog
    data = importdata(outfile);
    artifacts = [];
    if isfield(data,'textdata')  % checks if the structure has 'textdata' as one of the fields. I don't think outfile (CPT00112_forSOBI_voteforrecon.out) has any such field. So, it's mostly going to return 0 (P)
        for i = 1:1:size(data.textdata,1)
            ln = strsplit(' ', data.textdata{i});
            if strcmp(ln(2), 'emg') == 1 || strcmp(ln(2), 'peaks') == 1 || strcmp(ln(2), 'eog') == 1 || strcmp(ln(2), 'Reog') == 1
                artifacts = [artifacts str2num(cell2mat(ln(1)))];
            end
        end
    else
        %C:\Users\plsaini\Box Sync\Stroop\Temp\STR00412_aux_NoBad_AvgRef_forSOBI\STR00412_aux_NoBad_AvgRef_forSOBI_Sources_STR\STR00412_aux_NoBad_AvgRef_forSOBI
        for i = 1:1:size(data,1)  % across 88 channels (P)
            ln = strsplit( ' ',data{i,1}); % might have to reverse the order of the arguments. Just crapy
            
            if strcmp(ln(2), 'emg') == 1 || strcmp(ln(2), 'peaks') == 1 || strcmp(ln(2), 'eog') == 1 || strcmp(ln(2), 'Reog') == 1
                artifacts = [artifacts str2num(cell2mat(ln(1)))];   % the channel number added as an artifact (P)
            end
        end
    end
end


function hdr = writeBESAsb_data(X_cap, new_file)
    fid = fopen(new_file, 'w','ieee-le');
    if fid == -1
       fprintf(1,'In writeBESAsb_data:: Can''t WRITE in the folder. Please check your permissions.\n');
       fprintf(1, 'I will quit now... press any key to continue...(no you can''t stop me :D... yupieeeeeeee \n');  %  'yupieeeeee' added by Pranshul :p
       pause; 
       exit;
    end
    fwrite(fid, X_cap, 'float32');
    [hdr.nChans,hdr.nSamples] = size(X_cap); % Don't confuse nSamples with nTrials. nSamples mean all of the digital points of recording
    hdr.Fs = 2048; 
    fclose(fid);
end


function writeBESAgeneric(new_file, hdr)
    fid = fopen(new_file, 'w');
    fprintf(fid,'BESA Generic Data\n\n');
    fprintf(fid,'nChannels=%i\n\n', hdr.nChans);
    fprintf(fid,'sRate=%f\n\n', hdr.Fs);
    fprintf(fid,'nSamples=%i\n\n', hdr.nSamples);
    fprintf(fid,'format=float\n\n');
    fprintf(fid,'file=%s\n\n', strrep(new_file,'.generic','.dat'));
    fclose(fid);
end

